{"version":3,"sources":["pages/uikit/RangeSliders.tsx","components/PageTitle.tsx"],"names":["RangeSliders","selectedVals","setSelectedVals","useState","textValue","percent","selectedRanges","setSelectedRanges","onSlide","index","value","selectedValues","toFixed","onSlide2","selectedRange","_jsxs","_Fragment","children","_jsx","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xl","Card","Body","className","Nouislider","range","min","max","start","connect","render","handle","un","step","props","appSelector","useRedux","layoutType","state","Layout","xs","classNames","LayoutTypes","LAYOUT_HORIZONTAL","LAYOUT_DETACHED","Breadcrumb","listProps","Item","href","map","item"],"mappings":"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","file":"static/js/150.3ab6c28f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport Nouislider from 'nouislider-react';\r\nimport 'nouislider/distribute/nouislider.css';\r\n\r\n// components\r\nimport PageTitle from '../../components/PageTitle';\r\n\r\ninterface SelectedValsType {\r\n    [key: number]: { textValue: number; percent: number };\r\n}\r\n\r\ninterface SelectedRangesType {\r\n    [key: number]: string;\r\n}\r\n\r\n// RangeSliders\r\nconst RangeSliders = () => {\r\n    const [selectedVals, setSelectedVals] = useState<SelectedValsType>({\r\n        1: { textValue: 20, percent: 20 },\r\n        2: { textValue: 20, percent: 20 },\r\n    });\r\n    const [selectedRanges, setSelectedRanges] = useState<SelectedRangesType>({\r\n        1: '20-45',\r\n        2: '20-45',\r\n    });\r\n\r\n    const onSlide = (index: number, value: any[], percent: any) => {\r\n        let selectedValues = { ...selectedVals };\r\n        selectedValues[index] = {\r\n            textValue: value[0].toFixed(2),\r\n            percent: percent[0].toFixed(2),\r\n        };\r\n        setSelectedVals(selectedValues);\r\n    };\r\n\r\n    const onSlide2 = (index: number, value: any[]) => {\r\n        let selectedRange = { ...selectedRanges };\r\n        selectedRange[index] = value[0].toFixed(2) + '-' + value[1].toFixed(2);\r\n        setSelectedRanges(selectedRange);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Extended UI', path: '/extended-ui/rangesliders' },\r\n                    {\r\n                        label: 'Range Slider',\r\n                        path: '/extended-ui/rangesliders',\r\n                        active: true,\r\n                    },\r\n                ]}\r\n                title={'Range Slider'}\r\n            />\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h4 className=\"header-title\">Single</h4>\r\n                            <p className=\"text-muted font-14\">Slider with single selecrtor</p>\r\n\r\n                            <Nouislider\r\n                                range={{ min: 0, max: 100 }}\r\n                                start={[20]}\r\n                                connect\r\n                                onSlide={(render, handle, value, un, percent) => onSlide(1, value, percent)}\r\n                            />\r\n                            <p className=\"mt-2 mb-0\">\r\n                                Value:{' '}\r\n                                {selectedVals ? (\r\n                                    <span>\r\n                                        {selectedVals[1]['textValue']}, &nbsp;\r\n                                        {selectedVals[1]['percent']}%\r\n                                    </span>\r\n                                ) : null}\r\n                            </p>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col xl={6}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h4 className=\"header-title\">Range</h4>\r\n                            <p className=\"text-muted font-14\">Slider with range selecrtor</p>\r\n\r\n                            <Nouislider\r\n                                range={{ min: 10, max: 150 }}\r\n                                start={[20, 45]}\r\n                                connect\r\n                                onSlide={(render, handle, value, un, percent) => onSlide2(1, value)}\r\n                            />\r\n                            <p className=\"mt-2 mb-0\">\r\n                                Value: {selectedRanges ? <span>{selectedRanges[1]}</span> : null}\r\n                            </p>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h4 className=\"header-title\">Slider Step</h4>\r\n                            <p className=\"text-muted font-14\">Slider with step value</p>\r\n\r\n                            <Nouislider\r\n                                range={{ min: 0, max: 100 }}\r\n                                start={[20]}\r\n                                step={10}\r\n                                connect\r\n                                onSlide={(render, handle, value, un, percent) => onSlide(2, value, percent)}\r\n                            />\r\n                            <p className=\"mt-2 mb-0\">\r\n                                Value:{' '}\r\n                                {selectedVals ? (\r\n                                    <span>\r\n                                        {selectedVals[2]['textValue']}, &nbsp;\r\n                                        {selectedVals[2]['percent']}%\r\n                                    </span>\r\n                                ) : null}\r\n                            </p>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col xl={6}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h4 className=\"header-title\">Range Slider with Steps</h4>\r\n                            <p className=\"text-muted font-14\">Slider with range selecrtor with fixed step value</p>\r\n\r\n                            <Nouislider\r\n                                range={{ min: 10, max: 150 }}\r\n                                start={[20, 45]}\r\n                                step={15}\r\n                                connect\r\n                                onSlide={(render, handle, value, un, percent) => onSlide2(2, value)}\r\n                            />\r\n                            <p className=\"mt-2 mb-0\">\r\n                                Value: {selectedRanges ? <span>{selectedRanges[2]}</span> : null}\r\n                            </p>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RangeSliders;\r\n","import React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n// custom hoook\r\nimport { useRedux } from '../hooks/';\r\n\r\n// constants\r\nimport { LayoutTypes } from '../constants/';\r\n\r\ninterface BreadcrumbItems {\r\n    label: string;\r\n    path: string;\r\n    active?: boolean;\r\n}\r\n\r\ninterface PageTitleProps {\r\n    breadCrumbItems: Array<BreadcrumbItems>;\r\n    title: string;\r\n}\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps) => {\r\n    const { appSelector } = useRedux();\r\n\r\n    const { layoutType } = appSelector((state) => ({\r\n        layoutType: state.Layout.layoutType,\r\n    }));\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12}>\r\n                <div\r\n                    className={classNames('page-title-box', {\r\n                        'page-title-box-alt':\r\n                            layoutType === LayoutTypes.LAYOUT_HORIZONTAL || layoutType === LayoutTypes.LAYOUT_DETACHED,\r\n                    })}\r\n                >\r\n                    <h4 className=\"page-title\">{props.title}</h4>\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\">Minton</Breadcrumb.Item>\r\n\r\n                            {(props['breadCrumbItems'] || []).map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n"],"sourceRoot":""}