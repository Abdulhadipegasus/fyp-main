{"version":3,"sources":["layouts/TwoColumn/IconMenu.tsx","layouts/TwoColumn/MainMenu.tsx","layouts/TwoColumn/LeftSidebar.tsx","components/Scrollbar.tsx","assets/images/logo-sm.png"],"names":["IconMenu","_ref","menuItems","toggleMenu","activeMenuItems","_jsx","_Fragment","children","className","_jsxs","Scrollbar","style","maxHeight","timeout","scrollbarMaxSize","Link","to","src","logo","alt","height","id","map","item","index","activeParent","length","classNames","active","url","title","label","key","onClick","e","onMenuItemClick","menuItem","preventDefault","icon","MenuItemWithChildren","linkClassName","subMenuClassNames","open","setOpen","useState","includes","useEffect","status","badge","concat","variant","text","Collapse","in","child","i","React","Fragment","MenuItem","_ref2","MenuItemLink","_ref3","target","MainMenu","_ref4","isTitle","idx","LeftSidebar","location","useLocation","dispatch","appSelector","useRedux","getTwoColumnMenuItems","setActiveMenuItems","leftSideBarType","state","Layout","show","changeSidebarType","SideBarTypes","LEFT_SIDEBAR_TYPE_DEFAULT","findAllParent","activeMenu","useCallback","div","document","getElementById","matchingMenuItem","items","getElementsByClassName","pathname","mid","getAttribute","activeMt","findMenuItem","parentLevel0","hasChildren","LEFT_SIDEBAR_TYPE_CONDENSED","otherProps","SimpleBar"],"mappings":"6OAmFeA,MAjDEC,IAA+D,IAA9D,UAAEC,EAAS,WAAEC,EAAU,gBAAEC,GAA+BH,EAStE,OACII,cAAAC,WAAA,CAAAC,SACIF,cAAA,OAAKG,UAAU,0BAAyBD,SACpCE,eAACC,IAAS,CAACC,MAAO,CAAEC,UAAW,QAAUC,QAAS,IAAKC,iBAAkB,IAAIP,SAAA,CACzEF,cAACU,IAAI,CAACC,GAAG,IAAIR,UAAU,OAAMD,SACzBF,cAAA,QAAAE,SACIF,cAAA,OAAKY,IAAKC,IAAMC,IAAI,GAAGC,OAAO,WAItCf,cAAA,OAAKG,UAAU,kBAAkBa,GAAG,uBAAsBd,UACpDL,GAAa,IAAIoB,KAAI,CAACC,EAAMC,KAC1B,MAAMC,EACFrB,GACAA,EAAgBsB,QAChBtB,EAAgBA,EAAgBsB,OAAS,KAAOH,EAAU,IAC9D,OACIlB,cAACU,IAAI,CAEDP,UAAWmB,IAAW,WAAY,eAAgB,CAC9CC,OAAQH,IAEZT,GAAIO,EAAKhB,SAAY,KAAOgB,EAAKM,IACjCC,MAAOP,EAAKQ,MACZ,gBAAeR,EAAKS,IACpBC,QAAUC,IAjClBC,EAACD,EAAQE,KACTA,EAAS7B,UAAa6B,EAAS7B,SAASmB,QAExDQ,EAAEG,iBAENlC,EAAWiC,GAAU,IA6BWD,CAAgBD,EAAGX,IACrBhB,SAEFF,cAAA,KAAGG,UAAWe,EAAKe,QAXdd,gB,SCzCzC,MAAMe,EAAuBtC,IAAwF,IAAvF,KAAEsB,EAAI,cAAEiB,EAAa,kBAAEC,EAAiB,gBAAErC,EAAe,WAAED,GAAsBF,EAC3G,MAAOyC,EAAMC,GAAWC,mBAAkBxC,EAAiByC,SAAStB,EAAKS,MAEzEc,qBAAU,KACNH,EAAQvC,EAAiByC,SAAStB,EAAKS,QACxC,CAAC5B,EAAiBmB,IAUrB,OACIlB,cAAAC,WAAA,CAAAC,SACIE,eAAA,MAAID,UAAWmB,IAAW,WAAY,CAAE,kBAAmBe,IAAQnC,SAAA,CAC/DE,eAACM,IAAI,CACDC,GAAG,IACHiB,QAbQC,IACpBA,EAAEG,iBACF,MAAMU,GAAUL,EAGhB,OAFAC,EAAQI,GACJ5C,GAAYA,EAAWoB,EAAMwB,IAC1B,GASK,gBAAexB,EAAKS,IACpB,gBAAeU,EACflC,UAAWmB,IAAW,WAAYa,EAAe,CAC7C,kBAAmBpC,EAAiByC,SAAStB,EAAKS,KAAO,SAAW,KACrEzB,SAAA,CAEDgB,EAAKyB,MAGH3C,cAAA,QAAMG,UAAS,YAAAyC,OAAc1B,EAAKyB,MAAME,QAAO,2BAA0B3C,SACpEgB,EAAKyB,MAAMG,OAHhB9C,cAAA,QAAMG,UAAU,eAMpBC,eAAA,QAAAF,SAAA,CAAM,IAAEgB,EAAKQ,MAAM,UAEvB1B,cAAC+C,IAAQ,CAACC,GAAIX,EAAKnC,SACfF,cAAA,OAAAE,SACIF,cAAA,MAAIG,UAAWmB,IAAWc,GAAmBlC,UACvCgB,EAAKhB,UAAY,IAAIe,KAAI,CAACgC,EAAOC,IAE3BlD,cAACmD,IAAMC,SAAQ,CAAAlD,SACV+C,EAAM/C,SACHF,cAAAC,WAAA,CAAAC,SAEIF,cAACkC,EAAoB,CACjBhB,KAAM+B,EACNd,cAAepC,EAAiByC,SAASS,EAAMtB,KAAO,SAAW,GACjE5B,gBAAiBA,EACjBqC,kBAAkB,mBAClBtC,WAAYA,MAIpBE,cAAAC,WAAA,CAAAC,SAEIF,cAACqD,EAAQ,CACLnC,KAAM+B,EACN9C,UACIJ,EAAiByC,SAASS,EAAMtB,KAAO,kBAAoB,GAE/DQ,cAAepC,EAAiByC,SAASS,EAAMtB,KAAO,SAAW,QApB5DuB,iBAmCnDG,EAAWC,IAAmD,IAAlD,KAAEpC,EAAI,UAAEf,EAAS,cAAEgC,GAAyBmB,EAC1D,OACItD,cAAAC,WAAA,CAAAC,SACIF,cAAA,MAAIG,UAAWmB,IAAW,WAAYnB,GAAWD,SAC7CF,cAACuD,EAAY,CAACrC,KAAMA,EAAMf,UAAWgC,SAM/CoB,EAAeC,IAAoC,IAAnC,KAAEtC,EAAI,UAAEf,GAAqBqD,EAC/C,OACIpD,eAACM,IAAI,CACDC,GAAIO,EAAKM,IACTiC,OAAQvC,EAAKuC,OACbtD,UAAWmB,IAAW,eAAgB,WAAYnB,GAClD,gBAAee,EAAKS,IAAIzB,SAAA,CAEvBgB,EAAKyB,OAAS3C,cAAA,QAAMG,UAAS,YAAAyC,OAAc1B,EAAKyB,MAAME,QAAO,cAAa3C,SAAEgB,EAAKyB,MAAMG,OACxF1C,eAAA,QAAAF,SAAA,CAAM,IAAEgB,EAAKQ,MAAM,WAuEhBgC,MA5DEC,IAAgE,IAA/D,UAAE9D,EAAS,WAAEC,EAAU,gBAAEC,GAAgC4D,EACvE,OACI3D,cAAAC,WAAA,CAAAC,SACKH,GACGC,cAAA,OAAKG,UAAU,oBAAmBD,SAC9BF,cAAA,OAAKgB,GAAG,eAAeb,UAAU,QAAOD,SACpCF,cAACK,IAAS,CAACC,MAAO,CAAEC,UAAW,QAASL,UAClCL,GAAa,IAAIoB,KAAI,CAACc,EAAUJ,KAC9B,MAAMP,EACFrB,GACAA,EAAgBsB,QAChBtB,EAAgBA,EAAgBsB,OAAS,KAAOU,EAAc,IAClE,OACI/B,cAAA,OAEIG,UAAWmB,IAAW,sBAAuB,CACzC,UAAWF,IACZlB,SAEHE,eAAA,OAAKD,UAAU,YAAWD,SAAA,CACrB6B,EAAS6B,SAAW5D,cAAA,MAAIG,UAAU,aAAYD,SAAE6B,EAASL,QAC1D1B,cAAA,MAAIG,UAAU,kBAAiBD,UACzB6B,EAAS7B,UAAY,IAAIe,KAAI,CAACC,EAAM2C,IAE9B7D,cAACmD,IAAMC,SAAQ,CAAAlD,SACVgB,EAAKhB,SACFF,cAACkC,EAAoB,CACjBhB,KAAMA,EACNpB,WAAYA,EACZsC,kBAAkB,mBAClBrC,gBAAiBA,EACjBoC,cAAc,kBAGlBnC,cAACqD,EAAQ,CACLnC,KAAMA,EACNiB,cAAc,gBACdhC,UACIJ,EAAiByC,SAAStB,EAAKS,KACzB,kBACA,MAhBDkC,WAVhClC,eCnB9BmC,UAxFKA,KAChB,MAAMC,EAAWC,eACX,SAAEC,EAAQ,YAAEC,GAAgBC,cAE5BtE,EAAYuE,eAEXrE,EAAiBsE,GAAsB9B,mBAAwB,KAEhE,gBAAE+B,GAAoBJ,GAAaK,IAAK,CAC1CD,gBAAiBC,EAAMC,OAAOF,oBAM5BxE,EAAaA,CAACiC,EAAgB0C,KAC5B1C,EAAS7B,UACe,cAApBoE,GAAiCL,EAASS,YAAkBC,IAAaC,4BAG7EH,GAAMJ,EAAmB,CAACtC,EAAc,OAAM8C,YAAchF,EAAWkC,MAOzE+C,EAAaC,uBAAY,KAC3B,MAAMC,EAAMC,SAASC,eAAe,mBACpC,IAAIC,EAAmB,KAEvB,GAAIH,EAAK,CACL,IAAII,EAAaJ,EAAIK,uBAAuB,gBAC5C,IAAK,IAAInC,EAAI,EAAGA,EAAIkC,EAAM/D,SAAU6B,EAChC,GAAIa,EAASuB,WAAaF,EAAMlC,GAAGoC,SAAU,CACzCH,EAAmBC,EAAMlC,GACzB,MAIR,GAAIiC,EAAkB,CAClB,MAAMI,EAAMJ,EAAiBK,aAAa,iBACpCC,EAAWC,YAAa7F,EAAW0F,GACrCE,GACApB,EAAmB,CAACoB,EAAc,OAAMZ,YAAchF,EAAW4F,SAI9E,CAAC1B,EAAUlE,IAmBd,OAjBA4C,qBAAU,KACNqC,MACD,CAACA,IAEJrC,qBAAU,KACN,GAAI1C,GAAmBA,EAAgBsB,QAAqC,IAA3BtB,EAAgBsB,OAAc,CAC3E,MAAMsE,EAAeD,YAAa7F,EAAWE,EAAgB,IACvD6F,EAAcD,GAAgBA,EAAuB,UAAKA,EAAuB,SAAEtE,OAKrF4C,EAHC2B,GAAoC,YAApBtB,GAAqD,YAApBA,EAGzCI,YAAkBJ,GAFlBI,YAAkBC,IAAakB,iCAKjD,CAAC9F,EAAiBuE,EAAiBL,EAAUpE,IAG5CG,cAAAC,WAAA,CAAAC,SACIF,cAAA,OAAKG,UAAU,iBAAgBD,SAC3BE,eAAA,OAAKD,UAAU,QAAOD,SAAA,CAClBE,eAAA,OAAKD,UAAU,kBAAkBa,GAAG,kBAAiBd,SAAA,CACjDF,cAACL,EAAQ,CACLE,UAAWuE,cACXtE,WAAYA,EACZC,gBAAiBA,IAGrBC,cAAC0D,EAAQ,CAAC7D,UAAWA,EAAWE,gBAAiBA,EAAiBD,WAAYA,OAGlFE,cAAA,OAAKG,UAAU,sB,iCClHnC,yBAiBeE,IARGT,IAAoE,IAAnE,UAAEO,EAAS,MAAEG,EAAK,SAAEJ,KAAa4F,GAA4BlG,EAC5E,OACII,cAAC+F,IAAS,CAAC5F,UAAWA,EAAWG,MAAOA,KAAWwF,EAAU5F,SACxDA,M,iCCZE,QAA0B","file":"static/js/138.ed1f1849.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\n// components\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\n// images\r\nimport logo from '../../assets/images/logo-sm.png';\r\n\r\n/**\r\n * Renders the application menu\r\n */\r\ninterface Item {\r\n    key: string;\r\n    label: string;\r\n    isTitle?: boolean;\r\n    icon?: string;\r\n    url?: string;\r\n    badge?: {\r\n        variant: string;\r\n        text: string;\r\n    };\r\n    parentKey?: string;\r\n    target?: string;\r\n    children?: Item[];\r\n}\r\n\r\ninterface AppMenuProps {\r\n    menuItems: Item[];\r\n    toggleMenu: (item: Item, show: boolean) => void;\r\n    activeMenuItems: string[];\r\n}\r\n\r\nconst IconMenu = ({ menuItems, toggleMenu, activeMenuItems }: AppMenuProps) => {\r\n    const onMenuItemClick = (e: any, menuItem: Item) => {\r\n        const hasChildren = menuItem.children! && menuItem.children.length;\r\n        if (hasChildren) {\r\n            e.preventDefault();\r\n        }\r\n        toggleMenu(menuItem, true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"sidebar-icon-menu h-100\">\r\n                <Scrollbar style={{ maxHeight: '100%' }} timeout={500} scrollbarMaxSize={320}>\r\n                    <Link to=\"/\" className=\"logo\">\r\n                        <span>\r\n                            <img src={logo} alt=\"\" height=\"28\" />\r\n                        </span>\r\n                    </Link>\r\n\r\n                    <nav className=\"nav flex-column\" id=\"two-col-sidenav-main\">\r\n                        {(menuItems || []).map((item, index) => {\r\n                            const activeParent =\r\n                                activeMenuItems &&\r\n                                activeMenuItems.length &&\r\n                                activeMenuItems[activeMenuItems.length - 1] === item['key'];\r\n                            return (\r\n                                <Link\r\n                                    key={index}\r\n                                    className={classNames('nav-link', 'nav-link-ref', {\r\n                                        active: activeParent,\r\n                                    })}\r\n                                    to={item.children! ? '/#' : item.url!}\r\n                                    title={item.label}\r\n                                    data-menu-key={item.key}\r\n                                    onClick={(e: any) => {\r\n                                        onMenuItemClick(e, item);\r\n                                    }}\r\n                                >\r\n                                    <i className={item.icon} />\r\n                                </Link>\r\n                            );\r\n                        })}\r\n                    </nav>\r\n                </Scrollbar>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IconMenu;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Collapse } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\n// constants\r\nimport { MenuItemTypes } from '../../constants/menu';\r\n\r\n// components\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\ninterface SubMenus {\r\n    item: MenuItemTypes;\r\n    linkClassName?: string;\r\n    subMenuClassNames?: string;\r\n    activeMenuItems?: Array<string>;\r\n    toggleMenu?: (item: any, status: boolean) => void;\r\n    className?: string;\r\n}\r\n\r\nconst MenuItemWithChildren = ({ item, linkClassName, subMenuClassNames, activeMenuItems, toggleMenu }: SubMenus) => {\r\n    const [open, setOpen] = useState<boolean>(activeMenuItems!.includes(item.key));\r\n\r\n    useEffect(() => {\r\n        setOpen(activeMenuItems!.includes(item.key));\r\n    }, [activeMenuItems, item]);\r\n\r\n    const toggleMenuItem = (e: any) => {\r\n        e.preventDefault();\r\n        const status = !open;\r\n        setOpen(status);\r\n        if (toggleMenu) toggleMenu(item, status);\r\n        return false;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <li className={classNames('nav-item', { 'menuitem-active': open })}>\r\n                <Link\r\n                    to=\"#\"\r\n                    onClick={toggleMenuItem}\r\n                    data-menu-key={item.key}\r\n                    aria-expanded={open}\r\n                    className={classNames('nav-link', linkClassName, {\r\n                        'menuitem-active': activeMenuItems!.includes(item.key) ? 'active' : '',\r\n                    })}\r\n                >\r\n                    {!item.badge ? (\r\n                        <span className=\"menu-arrow\"></span>\r\n                    ) : (\r\n                        <span className={`badge bg-${item.badge.variant} rounded-pill float-end`}>\r\n                            {item.badge.text}\r\n                        </span>\r\n                    )}\r\n                    <span> {item.label} </span>\r\n                </Link>\r\n                <Collapse in={open}>\r\n                    <div>\r\n                        <ul className={classNames(subMenuClassNames)}>\r\n                            {(item.children || []).map((child, i) => {\r\n                                return (\r\n                                    <React.Fragment key={i}>\r\n                                        {child.children ? (\r\n                                            <>\r\n                                                {/* parent */}\r\n                                                <MenuItemWithChildren\r\n                                                    item={child}\r\n                                                    linkClassName={activeMenuItems!.includes(child.key) ? 'active' : ''}\r\n                                                    activeMenuItems={activeMenuItems}\r\n                                                    subMenuClassNames=\"nav-second-level\"\r\n                                                    toggleMenu={toggleMenu}\r\n                                                />\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                {/* child */}\r\n                                                <MenuItem\r\n                                                    item={child}\r\n                                                    className={\r\n                                                        activeMenuItems!.includes(child.key) ? 'menuitem-active' : ''\r\n                                                    }\r\n                                                    linkClassName={activeMenuItems!.includes(child.key) ? 'active' : ''}\r\n                                                />\r\n                                            </>\r\n                                        )}\r\n                                    </React.Fragment>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </Collapse>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n\r\nconst MenuItem = ({ item, className, linkClassName }: SubMenus) => {\r\n    return (\r\n        <>\r\n            <li className={classNames('nav-item', className)}>\r\n                <MenuItemLink item={item} className={linkClassName} />\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n\r\nconst MenuItemLink = ({ item, className }: SubMenus) => {\r\n    return (\r\n        <Link\r\n            to={item.url!}\r\n            target={item.target}\r\n            className={classNames('nav-link-ref', 'nav-link', className)}\r\n            data-menu-key={item.key}\r\n        >\r\n            {item.badge && <span className={`badge bg-${item.badge.variant} float-end`}>{item.badge.text}</span>}\r\n            <span> {item.label} </span>\r\n        </Link>\r\n    );\r\n};\r\n\r\ninterface MainMenuProps {\r\n    menuItems: MenuItemTypes[];\r\n    toggleMenu: (item: MenuItemTypes, show: boolean) => void;\r\n    activeMenuItems: string[];\r\n}\r\n\r\nconst MainMenu = ({ menuItems, toggleMenu, activeMenuItems }: MainMenuProps) => {\r\n    return (\r\n        <>\r\n            {activeMenuItems && (\r\n                <div className=\"sidebar-main-menu\">\r\n                    <div id=\"two-col-menu\" className=\"h-100\">\r\n                        <Scrollbar style={{ maxHeight: '100%' }}>\r\n                            {(menuItems || []).map((menuItem, key) => {\r\n                                const activeParent =\r\n                                    activeMenuItems &&\r\n                                    activeMenuItems.length &&\r\n                                    activeMenuItems[activeMenuItems.length - 1] === menuItem['key'];\r\n                                return (\r\n                                    <div\r\n                                        key={key}\r\n                                        className={classNames('twocolumn-menu-item', {\r\n                                            'd-block': activeParent,\r\n                                        })}\r\n                                    >\r\n                                        <div className=\"title-box\">\r\n                                            {menuItem.isTitle && <h5 className=\"menu-title\">{menuItem.label}</h5>}\r\n                                            <ul className=\"nav flex-column\">\r\n                                                {(menuItem.children || []).map((item, idx) => {\r\n                                                    return (\r\n                                                        <React.Fragment key={idx}>\r\n                                                            {item.children ? (\r\n                                                                <MenuItemWithChildren\r\n                                                                    item={item}\r\n                                                                    toggleMenu={toggleMenu}\r\n                                                                    subMenuClassNames=\"nav-second-level\"\r\n                                                                    activeMenuItems={activeMenuItems}\r\n                                                                    linkClassName=\"side-nav-link\"\r\n                                                                />\r\n                                                            ) : (\r\n                                                                <MenuItem\r\n                                                                    item={item}\r\n                                                                    linkClassName=\"side-nav-link\"\r\n                                                                    className={\r\n                                                                        activeMenuItems!.includes(item.key)\r\n                                                                            ? 'menuitem-active'\r\n                                                                            : ''\r\n                                                                    }\r\n                                                                />\r\n                                                            )}\r\n                                                        </React.Fragment>\r\n                                                    );\r\n                                                })}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </Scrollbar>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n// actions\r\nimport { changeSidebarType } from '../../redux/actions';\r\n\r\n//constants\r\nimport { SideBarTypes } from '../../constants/layout';\r\n\r\n// hooks\r\nimport { useRedux } from '../../hooks/';\r\n\r\nimport { findAllParent, findMenuItem, getTwoColumnMenuItems } from '../../helpers/menu';\r\n\r\n// components\r\nimport IconMenu from './IconMenu';\r\nimport MainMenu from './MainMenu';\r\n\r\ninterface Item {\r\n    key: string;\r\n    label: string;\r\n    isTitle?: boolean;\r\n    icon?: string;\r\n    url?: string;\r\n    badge?: {\r\n        variant: string;\r\n        text: string;\r\n    };\r\n    parentKey?: string;\r\n    target?: string;\r\n    children?: Item[];\r\n}\r\n\r\nconst LeftSidebar = () => {\r\n    const location = useLocation();\r\n    const { dispatch, appSelector } = useRedux();\r\n\r\n    const menuItems = getTwoColumnMenuItems();\r\n\r\n    const [activeMenuItems, setActiveMenuItems] = useState<Array<string>>([]);\r\n\r\n    const { leftSideBarType } = appSelector((state) => ({\r\n        leftSideBarType: state.Layout.leftSideBarType,\r\n    }));\r\n\r\n    /*\r\n     * toggle the menus\r\n     */\r\n    const toggleMenu = (menuItem: Item, show: boolean) => {\r\n        if (menuItem.children) {\r\n            if (leftSideBarType === 'condensed') dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\r\n        }\r\n\r\n        if (show) setActiveMenuItems([menuItem['key'], ...findAllParent(menuItems, menuItem)]);\r\n    };\r\n\r\n    /**\r\n     * activate the menuitems\r\n     */\r\n\r\n    const activeMenu = useCallback(() => {\r\n        const div = document.getElementById('sidebar-content');\r\n        let matchingMenuItem = null;\r\n\r\n        if (div) {\r\n            let items: any = div.getElementsByClassName('nav-link-ref');\r\n            for (let i = 0; i < items.length; ++i) {\r\n                if (location.pathname === items[i].pathname) {\r\n                    matchingMenuItem = items[i];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (matchingMenuItem) {\r\n                const mid = matchingMenuItem.getAttribute('data-menu-key');\r\n                const activeMt = findMenuItem(menuItems, mid);\r\n                if (activeMt) {\r\n                    setActiveMenuItems([activeMt['key'], ...findAllParent(menuItems, activeMt)]);\r\n                }\r\n            }\r\n        }\r\n    }, [location, menuItems]);\r\n\r\n    useEffect(() => {\r\n        activeMenu();\r\n    }, [activeMenu]);\r\n\r\n    useEffect(() => {\r\n        if (activeMenuItems && activeMenuItems.length && activeMenuItems.length === 1) {\r\n            const parentLevel0 = findMenuItem(menuItems, activeMenuItems[0]);\r\n            const hasChildren = parentLevel0 && parentLevel0['children'] && parentLevel0['children'].length;\r\n\r\n            if (!hasChildren && (leftSideBarType === 'default' || leftSideBarType === 'compact')) {\r\n                dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\r\n            } else {\r\n                dispatch(changeSidebarType(leftSideBarType));\r\n            }\r\n        }\r\n    }, [activeMenuItems, leftSideBarType, dispatch, menuItems]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"left-side-menu\">\r\n                <div className=\"h-100\">\r\n                    <div className=\"sidebar-content\" id=\"sidebar-content\">\r\n                        <IconMenu\r\n                            menuItems={getTwoColumnMenuItems()}\r\n                            toggleMenu={toggleMenu}\r\n                            activeMenuItems={activeMenuItems}\r\n                        />\r\n\r\n                        <MainMenu menuItems={menuItems} activeMenuItems={activeMenuItems} toggleMenu={toggleMenu} />\r\n                    </div>\r\n\r\n                    <div className=\"clearfix\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LeftSidebar;\r\n","import React from 'react';\r\nimport SimpleBar from 'simplebar-react';\r\n\r\ninterface ScrollbarProps extends SimpleBar.Props {\r\n    className?: string;\r\n    style?: any;\r\n    children?: any;\r\n}\r\n\r\nconst Scrollbar = ({ className, style, children, ...otherProps }: ScrollbarProps) => {\r\n    return (\r\n        <SimpleBar className={className} style={style} {...otherProps}>\r\n            {children}\r\n        </SimpleBar>\r\n    );\r\n};\r\n\r\nexport default Scrollbar;\r\n","export default __webpack_public_path__ + \"static/media/logo-sm.d0b4aaf8.png\";"],"sourceRoot":""}