{"version":3,"sources":["pages/apps/Ecommerce/Customers.tsx","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventListener.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMounted.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/usePrevious.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useResizeObserver.js","../node_modules/@restart/ui/esm/Anchor.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCallbackRef.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useGlobalListener.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useIsomorphicEffect.js","../node_modules/react-bootstrap/esm/Button.js","components/Pagination.tsx","components/Table.tsx"],"names":["columns","Header","accessor","sort","Cell","_ref","row","_jsxs","className","children","original","avatar","_jsx","src","alt","name","Link","to","id","classes","_ref2","React","Fragment","classNames","status","ActionColumn","sizePerPageList","text","value","customers","length","Customers","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xs","Card","Body","sm","Button","Table","data","pageSize","isSortable","pagination","isSelectable","isSearchable","tableClass","theadClass","searchBoxClass","useCommittedRef","ref","useRef","useEffect","current","useEventCallback","fn","useCallback","apply","arguments","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","createWithBsPrefix","prefix","displayName","Component","defaultProps","undefined","BsComponent","bsPrefix","as","Tag","props","resolvedPrefix","useBootstrapPrefix","useEventListener","eventTarget","event","listener","capture","handler","target","addEventListener","removeEventListener","useMounted","mounted","isMounted","usePrevious","WeakMap","_excluded","Anchor","onKeyDown","source","excluded","key","i","sourceKeys","Object","keys","indexOf","_objectWithoutPropertiesLoose","buttonProps","useButtonProps","assign","tagName","handleKeyDown","e","href","trim","role","useCallbackRef","useState","disabled","rel","onClick","tabIndex","type","meta","handleClick","isTrivialHref","preventDefault","stopPropagation","asProp","useGlobalListener","documentTarget","document","isReactNative","global","navigator","product","isDOM","useLayoutEffect","variant","size","concat","Pagination","tableProps","pageCount","setPageCount","pageIndex","setPageIndex","state","filterPages","visiblePages","totalPages","filter","page","getVisiblePages","total","changePage","setVisiblePages","gotoPage","activePage","_Fragment","onChange","setPageSize","Number","map","index","pageOptions","min","array","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","setValue","useAsyncDebounce","placeholder","IndeterminateCheckbox","forwardRef","indeterminate","rest","defaultRef","resolvedRef","htmlFor","isExpandable","otherProps","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","dataTable","useTable","initialState","hasOwnProperty","hooks","visibleColumns","push","_ref3","getToggleAllPageRowsSelectedProps","_ref4","getToggleRowSelectedProps","_ref5","getToggleAllRowsExpandedProps","isAllRowsExpanded","_ref6","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","rows","getTableProps","headerGroups","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","sorting_desc","isSortedDesc","sorting_asc","sortable","render","getTableBodyProps","prepareRow","getRowProps","cells","cell","getCellProps"],"mappings":"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","file":"static/js/113.a9127b41.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Card, Button } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n// components\r\nimport PageTitle from '../../../components/PageTitle';\r\nimport Table from '../../../components/Table';\r\n\r\n// dummy data\r\nimport { customers } from './data';\r\n\r\n/* name column render */\r\nconst NameColumn = ({ row }: { row: any }) => {\r\n    return (\r\n        <div className=\"d-flex\">\r\n            {row.original.avatar ? (\r\n                <img src={row.original.avatar} alt=\"\" className=\"me-3 rounded-circle avatar-sm\" />\r\n            ) : (\r\n                <div className=\"avatar-sm me-3\">\r\n                    <div className=\"avatar-title rounded-circle bg-soft-primary fw-medium text-primary\">\r\n                        {row.original.name[0]}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <div className=\"flex-1\">\r\n                <h5 className=\"mt-0 mb-1\">\r\n                    <Link to=\"#\" className=\"text-dark\">\r\n                        {row.original.name}\r\n                    </Link>\r\n                </h5>\r\n                <p className=\"mb-0 font-13\">ID: {row.original.id}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n/* status column render */\r\nconst StatusColumn = ({ row }: { row: any }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <span\r\n                className={classNames('badge', {\r\n                    'badge-soft-success': row.original.status === 'Active',\r\n                    'badge-soft-danger': row.original.status === 'Blocked',\r\n                })}\r\n            >\r\n                {row.original.status}\r\n            </span>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n/* action column render */\r\nconst ActionColumn = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Link to=\"#\" className=\"action-icon\">\r\n                {' '}\r\n                <i className=\"mdi mdi-square-edit-outline\"></i>\r\n            </Link>\r\n            <Link to=\"#\" className=\"action-icon\">\r\n                {' '}\r\n                <i className=\"mdi mdi-delete\"></i>\r\n            </Link>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n// columns to render\r\nconst columns = [\r\n    {\r\n        Header: 'Customer',\r\n        accessor: 'name',\r\n        sort: true,\r\n        Cell: NameColumn,\r\n        classes: 'table-user',\r\n    },\r\n    {\r\n        Header: 'Phone',\r\n        accessor: 'phone',\r\n        sort: true,\r\n    },\r\n    {\r\n        Header: 'Balance',\r\n        accessor: 'balance',\r\n        sort: true,\r\n    },\r\n    {\r\n        Header: 'Orders',\r\n        accessor: 'orders',\r\n        sort: true,\r\n    },\r\n    {\r\n        Header: 'Last Order',\r\n        accessor: 'last_order',\r\n        sort: true,\r\n    },\r\n    {\r\n        Header: 'Status',\r\n        accessor: 'status',\r\n        sort: true,\r\n        Cell: StatusColumn,\r\n    },\r\n    {\r\n        Header: 'Action',\r\n        accessor: 'action',\r\n        sort: false,\r\n        Cell: ActionColumn,\r\n    },\r\n];\r\n\r\n// give page size\r\nconst sizePerPageList = [\r\n    {\r\n        text: '10',\r\n        value: 10,\r\n    },\r\n    {\r\n        text: '25',\r\n        value: 25,\r\n    },\r\n    {\r\n        text: 'All',\r\n        value: customers.length,\r\n    },\r\n];\r\n\r\n// main component\r\nconst Customers = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'eCommerce', path: '/apps/ecommerce/customers' },\r\n                    {\r\n                        label: 'Customers',\r\n                        path: '/apps/ecommerce/customers',\r\n                        active: true,\r\n                    },\r\n                ]}\r\n                title={'Customers'}\r\n            />\r\n\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Row className=\"mb-2\">\r\n                                <Col sm={4}>\r\n                                    <Button className=\"btn btn-danger mb-2\">\r\n                                        <i className=\"mdi mdi-plus-circle me-1\"></i> Add Customers\r\n                                    </Button>\r\n                                </Col>\r\n\r\n                                <Col sm={8}>\r\n                                    <div className=\"text-sm-end\">\r\n                                        <Button className=\"btn btn-success mb-2 me-1\">\r\n                                            <i className=\"mdi mdi-cog\"></i>\r\n                                        </Button>\r\n\r\n                                        <Button className=\"btn btn-light mb-2 me-1\">Import</Button>\r\n\r\n                                        <Button className=\"btn btn-light mb-2\">Export</Button>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <div className=\"table-responsive\">\r\n                                <Table\r\n                                    columns={columns}\r\n                                    data={customers}\r\n                                    pageSize={10}\r\n                                    sizePerPageList={sizePerPageList}\r\n                                    isSortable={true}\r\n                                    pagination={true}\r\n                                    isSelectable={true}\r\n                                    isSearchable={true}\r\n                                    tableClass=\"table-centered dt-responsive nowrap w-100\"\r\n                                    theadClass=\"table-light\"\r\n                                    searchBoxClass=\"mb-2\"\r\n                                />\r\n                            </div>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Customers;\r\n","import { useEffect, useRef } from 'react';\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded befor being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport default useCommittedRef;","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  var ref = useCommittedRef(fn);\n  return useCallback(function () {\n    return ref.current && ref.current.apply(ref, arguments);\n  }, [ref]);\n}","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import { useEffect } from 'react';\nimport useEventCallback from './useEventCallback';\n\n/**\n * Attaches an event handler outside directly to specified DOM element\n * bypassing the react synthetic event system.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useEventListener(eventTarget, event, listener, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var handler = useEventCallback(listener);\n  useEffect(function () {\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return function () {\n      return target.removeEventListener(event, handler, capture);\n    };\n  }, [eventTarget]);\n}","import { useRef, useEffect } from 'react';\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\n\nexport default function useMounted() {\n  var mounted = useRef(true);\n  var isMounted = useRef(function () {\n    return mounted.current;\n  });\n  useEffect(function () {\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nvar targetMap = new WeakMap();\nvar resizeObserver;\n\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(function (entries) {\n    entries.forEach(function (entry) {\n      var handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\n\n\nexport default function useResizeObserver(element) {\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  useEffect(function () {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, function (rect) {\n      setRect(rect);\n    });\n    return function () {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","const _excluded = [\"onKeyDown\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/anchor-has-content */\nimport * as React from 'react';\nimport { useEventCallback } from '@restart/hooks';\nimport { useButtonProps } from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n\n/**\n * An generic `<a>` component that covers a few A11y cases, ensuring that\n * cases where the `href` is missing or trivial like \"#\" are treated like buttons.\n */\nconst Anchor = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    onKeyDown\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps] = useButtonProps(Object.assign({\n    tagName: 'a'\n  }, props));\n  const handleKeyDown = useEventCallback(e => {\n    buttonProps.onKeyDown(e);\n    onKeyDown == null ? void 0 : onKeyDown(e);\n  });\n\n  if (isTrivialHref(props.href) && !props.role || props.role === 'button') {\n    return /*#__PURE__*/_jsx(\"a\", Object.assign({\n      ref: ref\n    }, props, buttonProps, {\n      onKeyDown: handleKeyDown\n    }));\n  }\n\n  return /*#__PURE__*/_jsx(\"a\", Object.assign({\n    ref: ref\n  }, props, {\n    onKeyDown: onKeyDown\n  }));\n});\nAnchor.displayName = 'Anchor';\nexport default Anchor;","import { useState } from 'react';\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\n\nexport default function useCallbackRef() {\n  return useState(null);\n}","const _excluded = [\"as\", \"disabled\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n\n  const meta = {\n    tagName\n  };\n\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  return [{\n    role: 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href: tagName === 'a' && disabled ? undefined : href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    as: asProp,\n    disabled\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import useEventListener from './useEventListener';\nimport { useCallback } from 'react';\n\n/**\n * Attaches an event handler outside directly to the `document`,\n * bypassing the react synthetic event system.\n *\n * ```ts\n * useGlobalListener('keydown', (event) => {\n *  console.log(event.key)\n * })\n * ```\n *\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useGlobalListener(event, handler, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var documentTarget = useCallback(function () {\n    return document;\n  }, []);\n  return useEventListener(documentTarget, event, handler, capture);\n}","import { useEffect, useLayoutEffect } from 'react';\nvar isReactNative = typeof global !== 'undefined' && // @ts-ignore\nglobal.navigator && // @ts-ignore\nglobal.navigator.product === 'ReactNative';\nvar isDOM = typeof document !== 'undefined';\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\n\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\ninterface PaginationProps {\r\n    tableProps: any;\r\n    sizePerPageList: {\r\n        text: string;\r\n        value: number;\r\n    }[];\r\n}\r\n\r\nconst Pagination = ({ tableProps, sizePerPageList }: PaginationProps) => {\r\n    /**\r\n     * pagination count , index\r\n     */\r\n    const [pageCount, setPageCount] = useState<number>(tableProps.pageCount);\r\n    const [pageIndex, setPageIndex] = useState<number>(tableProps.state.pageIndex);\r\n\r\n    useEffect(() => {\r\n        setPageCount(tableProps.pageCount);\r\n        setPageIndex(tableProps.state.pageIndex);\r\n    }, [tableProps.pageCount, tableProps.state.pageIndex]);\r\n\r\n    /**\r\n     * get filter pages\r\n     */\r\n    const filterPages = useCallback(\r\n        (visiblePages: any, totalPages: number) => {\r\n            return visiblePages.filter((page: any) => page <= pageCount);\r\n        },\r\n        [pageCount]\r\n    );\r\n\r\n    /**\r\n     * handle visible pages\r\n     */\r\n    const getVisiblePages = useCallback(\r\n        (page: number | null, total: number) => {\r\n            if (total < 7) {\r\n                return filterPages([1, 2, 3, 4, 5, 6], total);\r\n            } else {\r\n                if (page! % 5 >= 0 && page! > 4 && page! + 2 < total) {\r\n                    return [1, page! - 1, page!, page! + 1, total];\r\n                } else if (page! % 5 >= 0 && page! > 4 && page! + 2 >= total) {\r\n                    return [1, total - 3, total - 2, total - 1, total];\r\n                } else {\r\n                    return [1, 2, 3, 4, 5, total];\r\n                }\r\n            }\r\n        },\r\n        [filterPages]\r\n    );\r\n\r\n    /**\r\n     * handle page change\r\n     * @param page - current page\r\n     * @returns\r\n     */\r\n    const changePage = (page: number) => {\r\n        const activePage = pageIndex + 1;\r\n\r\n        if (page === activePage) {\r\n            return;\r\n        }\r\n\r\n        const visiblePages = getVisiblePages(page, pageCount);\r\n        setVisiblePages(filterPages(visiblePages, pageCount));\r\n\r\n        tableProps.gotoPage(page - 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const visiblePages = getVisiblePages(null, pageCount);\r\n        setVisiblePages(visiblePages);\r\n    }, [pageCount, getVisiblePages]);\r\n\r\n    const [visiblePages, setVisiblePages] = useState<number[]>(getVisiblePages(null, pageCount));\r\n    const activePage: number = pageIndex + 1;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-lg-flex align-items-center text-center pb-1\">\r\n                {sizePerPageList.length > 0 && (\r\n                    <div className=\"d-inline-block me-3\">\r\n                        <label className=\"me-1\">Display :</label>\r\n                        <select\r\n                            value={tableProps.state.pageSize}\r\n                            onChange={(e: any) => {\r\n                                tableProps.setPageSize(Number(e.target.value));\r\n                            }}\r\n                            className=\"form-select d-inline-block w-auto\"\r\n                        >\r\n                            {(sizePerPageList || []).map((pageSize, index) => {\r\n                                return (\r\n                                    <option key={index} value={pageSize.value}>\r\n                                        {pageSize.text}\r\n                                    </option>\r\n                                );\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                )}\r\n\r\n                <span className=\"me-3\">\r\n                    Page{' '}\r\n                    <strong>\r\n                        {pageIndex + 1} of {tableProps.pageOptions.length}\r\n                    </strong>{' '}\r\n                </span>\r\n\r\n                <span className=\"d-inline-block align-items-center text-sm-start text-center my-sm-0 my-2\">\r\n                    <label>Go to page : </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={pageIndex + 1}\r\n                        min=\"1\"\r\n                        onChange={(e: any) => {\r\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n                            tableProps.gotoPage(page);\r\n                            setPageIndex(tableProps.state.pageIndex);\r\n                        }}\r\n                        className=\"form-control w-25 ms-1 d-inline-block\"\r\n                    />\r\n                </span>\r\n\r\n                <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0\">\r\n                    <li\r\n                        key=\"prevpage\"\r\n                        className={classNames('page-item', 'paginate_button', 'previous', {\r\n                            disabled: activePage === 1,\r\n                        })}\r\n                        onClick={() => {\r\n                            if (activePage === 1) return;\r\n                            changePage(activePage - 1);\r\n                        }}\r\n                    >\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            <i className=\"mdi mdi-chevron-left\"></i>\r\n                        </Link>\r\n                    </li>\r\n                    {(visiblePages || []).map((page, index, array) => {\r\n                        return array[index - 1] + 1 < page ? (\r\n                            <React.Fragment key={page}>\r\n                                <li className=\"page-item disabled d-none d-xl-inline-block\">\r\n                                    <Link to=\"#\" className=\"page-link\">\r\n                                        ...\r\n                                    </Link>\r\n                                </li>\r\n                                <li\r\n                                    className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\r\n                                        active: activePage === page,\r\n                                    })}\r\n                                    onClick={(e: any) => changePage(page)}\r\n                                >\r\n                                    <Link to=\"#\" className=\"page-link\">\r\n                                        {page}\r\n                                    </Link>\r\n                                </li>\r\n                            </React.Fragment>\r\n                        ) : (\r\n                            <li\r\n                                key={page}\r\n                                className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\r\n                                    active: activePage === page,\r\n                                })}\r\n                                onClick={(e: any) => changePage(page)}\r\n                            >\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page}\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                    <li\r\n                        key=\"nextpage\"\r\n                        className={classNames('page-item', 'paginate_button', 'next', {\r\n                            disabled: activePage === tableProps.pageCount,\r\n                        })}\r\n                        onClick={() => {\r\n                            if (activePage === tableProps.pageCount) return;\r\n                            changePage(activePage + 1);\r\n                        }}\r\n                    >\r\n                        <Link to=\"#\" className=\"page-link\">\r\n                            <i className=\"mdi mdi-chevron-right\"></i>\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useRef, useEffect, forwardRef, useState } from 'react';\r\nimport {\r\n    useTable,\r\n    useSortBy,\r\n    usePagination,\r\n    useRowSelect,\r\n    useGlobalFilter,\r\n    useAsyncDebounce,\r\n    useExpanded,\r\n} from 'react-table';\r\nimport classNames from 'classnames';\r\n\r\n// components\r\nimport Pagination from './Pagination';\r\n\r\ninterface GlobalFilterProps {\r\n    preGlobalFilteredRows: any;\r\n    globalFilter: any;\r\n    setGlobalFilter: any;\r\n    searchBoxClass: any;\r\n}\r\n\r\n// Define a default UI for filtering\r\nconst GlobalFilter = ({ preGlobalFilteredRows, globalFilter, setGlobalFilter, searchBoxClass }: GlobalFilterProps) => {\r\n    const count = preGlobalFilteredRows.length;\r\n    const [value, setValue] = useState<any>(globalFilter);\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className={classNames(searchBoxClass)}>\r\n            <span className=\"d-flex align-items-center\">\r\n                Search :{' '}\r\n                <input\r\n                    type=\"search\"\r\n                    value={value || ''}\r\n                    onChange={(e: any) => {\r\n                        setValue(e.target.value);\r\n                        onChange(e.target.value);\r\n                    }}\r\n                    placeholder={`${count} records...`}\r\n                    className=\"form-control react-table-search ms-1\"\r\n                />\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface IndeterminateCheckboxProps {\r\n    indeterminate: any;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nconst IndeterminateCheckbox = forwardRef<HTMLInputElement, IndeterminateCheckboxProps>(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n        const defaultRef = useRef();\r\n        const resolvedRef: any = ref || defaultRef;\r\n\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"form-check font-16 mb-0\">\r\n                    <input type=\"checkbox\" className=\"form-check-input\" ref={resolvedRef} {...rest} />\r\n                    <label htmlFor=\"form-check-input\" className=\"form-check-label\"></label>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n);\r\n\r\ninterface TableProps {\r\n    isSearchable?: boolean;\r\n    isSortable?: boolean;\r\n    pagination?: boolean;\r\n    isSelectable?: boolean;\r\n    isExpandable?: boolean;\r\n    sizePerPageList?: {\r\n        text: string;\r\n        value: number;\r\n    }[];\r\n    columns: {\r\n        Header: string;\r\n        accessor: string;\r\n        sort?: boolean;\r\n        Cell?: any;\r\n        className?: string;\r\n    }[];\r\n    data: any[];\r\n    pageSize?: any;\r\n    searchBoxClass?: string;\r\n    tableClass?: string;\r\n    theadClass?: string;\r\n}\r\n\r\nconst Table = (props: TableProps) => {\r\n    const isSearchable = props['isSearchable'] || false;\r\n    const isSortable = props['isSortable'] || false;\r\n    const pagination = props['pagination'] || false;\r\n    const isSelectable = props['isSelectable'] || false;\r\n    const isExpandable = props['isExpandable'] || false;\r\n    const sizePerPageList = props['sizePerPageList'] || [];\r\n\r\n    let otherProps: any = {};\r\n\r\n    if (isSearchable) {\r\n        otherProps['useGlobalFilter'] = useGlobalFilter;\r\n    }\r\n    if (isSortable) {\r\n        otherProps['useSortBy'] = useSortBy;\r\n    }\r\n    if (isExpandable) {\r\n        otherProps['useExpanded'] = useExpanded;\r\n    }\r\n    if (pagination) {\r\n        otherProps['usePagination'] = usePagination;\r\n    }\r\n    if (isSelectable) {\r\n        otherProps['useRowSelect'] = useRowSelect;\r\n    }\r\n\r\n    const dataTable = useTable(\r\n        {\r\n            columns: props['columns'],\r\n            data: props['data'],\r\n            initialState: { pageSize: props['pageSize'] || 10 },\r\n        },\r\n        otherProps.hasOwnProperty('useGlobalFilter') && otherProps['useGlobalFilter'],\r\n        otherProps.hasOwnProperty('useSortBy') && otherProps['useSortBy'],\r\n        otherProps.hasOwnProperty('useExpanded') && otherProps['useExpanded'],\r\n        otherProps.hasOwnProperty('usePagination') && otherProps['usePagination'],\r\n        otherProps.hasOwnProperty('useRowSelect') && otherProps['useRowSelect'],\r\n        (hooks) => {\r\n            isSelectable &&\r\n                hooks.visibleColumns.push((columns: any) => [\r\n                    // Let's make a column for selection\r\n                    {\r\n                        id: 'selection',\r\n                        // The header can use the table's getToggleAllRowsSelectedProps method\r\n                        // to render a checkbox\r\n                        Header: ({ getToggleAllPageRowsSelectedProps }: any) => (\r\n                            <div>\r\n                                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\r\n                            </div>\r\n                        ),\r\n                        // The cell can use the individual row's getToggleRowSelectedProps method\r\n                        // to the render a checkbox\r\n                        Cell: ({ row }: any) => (\r\n                            <div>\r\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n                            </div>\r\n                        ),\r\n                    },\r\n                    ...columns,\r\n                ]);\r\n\r\n            isExpandable &&\r\n                hooks.visibleColumns.push((columns: any) => [\r\n                    // Let's make a column for selection\r\n                    {\r\n                        // Build our expander column\r\n                        id: 'expander', // Make sure it has an ID\r\n                        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }: any) => (\r\n                            <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? '-' : '+'}</span>\r\n                        ),\r\n                        Cell: ({ row }) =>\r\n                            // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n                            // to build the toggle for expanding a row\r\n                            row.canExpand ? (\r\n                                <span\r\n                                    {...row.getToggleRowExpandedProps({\r\n                                        style: {\r\n                                            // We can even use the row.depth property\r\n                                            // and paddingLeft to indicate the depth\r\n                                            // of the row\r\n                                            paddingLeft: `${row.depth * 2}rem`,\r\n                                        },\r\n                                    })}\r\n                                >\r\n                                    {row.isExpanded ? '-' : '+'}\r\n                                </span>\r\n                            ) : null,\r\n                    },\r\n                    ...columns,\r\n                ]);\r\n        }\r\n    );\r\n\r\n    let rows = pagination ? dataTable.page : dataTable.rows;\r\n\r\n    return (\r\n        <>\r\n            {isSearchable && (\r\n                <GlobalFilter\r\n                    preGlobalFilteredRows={dataTable.preGlobalFilteredRows}\r\n                    globalFilter={dataTable.state.globalFilter}\r\n                    setGlobalFilter={dataTable.setGlobalFilter}\r\n                    searchBoxClass={props['searchBoxClass']}\r\n                />\r\n            )}\r\n\r\n            <div className=\"table-responsive\">\r\n                <table\r\n                    {...dataTable.getTableProps()}\r\n                    className={classNames('table table-centered react-table', props['tableClass'])}\r\n                >\r\n                    <thead className={props['theadClass']}>\r\n                        {(dataTable.headerGroups || []).map((headerGroup: any) => (\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                {(headerGroup.headers || []).map((column: any) => (\r\n                                    <th\r\n                                        {...column.getHeaderProps(column.sort && column.getSortByToggleProps())}\r\n                                        className={classNames({\r\n                                            sorting_desc: column.isSortedDesc === true,\r\n                                            sorting_asc: column.isSortedDesc === false,\r\n                                            sortable: column.sort === true,\r\n                                        })}\r\n                                    >\r\n                                        {column.render('Header')}\r\n                                    </th>\r\n                                ))}\r\n                            </tr>\r\n                        ))}\r\n                    </thead>\r\n                    <tbody {...dataTable.getTableBodyProps()}>\r\n                        {(rows || []).map((row: any, i: number) => {\r\n                            dataTable.prepareRow(row);\r\n                            return (\r\n                                <tr {...row.getRowProps()}>\r\n                                    {(row.cells || []).map((cell: any) => {\r\n                                        return (\r\n                                            <td\r\n                                                {...cell.getCellProps([\r\n                                                    {\r\n                                                        className: cell.column.className,\r\n                                                    },\r\n                                                ])}\r\n                                            >\r\n                                                {cell.render('Cell')}\r\n                                            </td>\r\n                                        );\r\n                                    })}\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            {pagination && <Pagination tableProps={dataTable} sizePerPageList={sizePerPageList} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Table;\r\n"],"sourceRoot":""}