{"version":3,"sources":["pages/uikit/TooltipsPopovers.tsx","components/PageTitle.tsx","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/warning/warning.js","../node_modules/react-bootstrap/esm/Button.js"],"names":["PopoverDirection","popover","_jsx","Popover","id","children","Body","_jsxs","_Fragment","className","placement","map","item","OverlayTrigger","trigger","overlay","popper","concat","Button","variant","TooltipDirection","Tooltip","TooltipsPopovers","React","Fragment","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xs","Card","props","appSelector","useRedux","layoutType","state","Layout","classNames","LayoutTypes","LAYOUT_HORIZONTAL","LAYOUT_DETACHED","Breadcrumb","listProps","Item","href","index","p","ref","CardImg","_ref","bsPrefix","as","Component","prefix","useBootstrapPrefix","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","value","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Link","Text","Header","Footer","ImgOverlay","warning","module","exports","size","buttonProps","tagName","useButtonProps","disabled"],"mappings":"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","file":"static/js/127.996b46b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Button, Popover, OverlayProps } from 'react-bootstrap';\r\n\r\n// components\r\nimport PageTitle from '../../components/PageTitle';\r\n\r\ninterface DirectionsType {\r\n    placement: OverlayProps['placement'];\r\n}\r\n\r\nconst PopoverDirection = () => {\r\n    const directions: DirectionsType[] = [\r\n        { placement: 'top' },\r\n        { placement: 'bottom' },\r\n        { placement: 'right' },\r\n        { placement: 'left' },\r\n    ];\r\n\r\n    const popover = (\r\n        <Popover id=\"popover-direction\">\r\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\r\n        </Popover>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <h4 className=\"header-title\">Popovers</h4>\r\n            <p className=\"sub-header\">\r\n                Add small overlays of content, like those on the iPad, to any element for housing secondary information.\r\n            </p>\r\n\r\n            <div className=\"button-list\">\r\n                {(directions || []).map((item) => (\r\n                    <OverlayTrigger\r\n                        trigger=\"click\"\r\n                        key={item.placement}\r\n                        placement={item.placement}\r\n                        overlay={\r\n                            <Popover popper id={`popover-positioned-${item.placement}`}>\r\n                                <Popover.Body>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</Popover.Body>\r\n                            </Popover>\r\n                        }\r\n                    >\r\n                        <Button variant=\"light\" className=\"me-1\">\r\n                            Popover on {item.placement}\r\n                        </Button>\r\n                    </OverlayTrigger>\r\n                ))}\r\n\r\n                <OverlayTrigger trigger=\"focus\" placement=\"right\" overlay={popover}>\r\n                    <Button>Dismissible popover</Button>\r\n                </OverlayTrigger>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst TooltipDirection = () => {\r\n    const directions: DirectionsType[] = [\r\n        { placement: 'top' },\r\n        { placement: 'bottom' },\r\n        { placement: 'right' },\r\n        { placement: 'left' },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <h4 className=\"header-title\">Tooltips</h4>\r\n            <p className=\"sub-header\">Four options are available: top, right, bottom, and left aligned.</p>\r\n\r\n            <div className=\"button-list\">\r\n                {(directions || []).map((item) => (\r\n                    <OverlayTrigger\r\n                        key={item.placement}\r\n                        placement={item.placement}\r\n                        overlay={\r\n                            <Tooltip id={`tooltip-${item.placement}`}>\r\n                                Tooltip on <strong>{item.placement}</strong>.\r\n                            </Tooltip>\r\n                        }\r\n                    >\r\n                        <Button variant=\"light\" className=\"me-1\">\r\n                            Tooltip on {item.placement}\r\n                        </Button>\r\n                    </OverlayTrigger>\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst TooltipsPopovers = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Base UI', path: '/ui/tooltips-popovers' },\r\n                    {\r\n                        label: 'Tooltips & Popovers',\r\n                        path: '/ui/tooltips-popovers',\r\n                        active: true,\r\n                    },\r\n                ]}\r\n                title={'Tooltips & Popovers'}\r\n            />\r\n\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <PopoverDirection />\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <TooltipDirection />\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default TooltipsPopovers;\r\n","import React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n// custom hoook\r\nimport { useRedux } from '../hooks/';\r\n\r\n// constants\r\nimport { LayoutTypes } from '../constants/';\r\n\r\ninterface BreadcrumbItems {\r\n    label: string;\r\n    path: string;\r\n    active?: boolean;\r\n}\r\n\r\ninterface PageTitleProps {\r\n    breadCrumbItems: Array<BreadcrumbItems>;\r\n    title: string;\r\n}\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps) => {\r\n    const { appSelector } = useRedux();\r\n\r\n    const { layoutType } = appSelector((state) => ({\r\n        layoutType: state.Layout.layoutType,\r\n    }));\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12}>\r\n                <div\r\n                    className={classNames('page-title-box', {\r\n                        'page-title-box-alt':\r\n                            layoutType === LayoutTypes.LAYOUT_HORIZONTAL || layoutType === LayoutTypes.LAYOUT_DETACHED,\r\n                    })}\r\n                >\r\n                    <h4 className=\"page-title\">{props.title}</h4>\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\">Minton</Breadcrumb.Item>\r\n\r\n                            {(props['breadCrumbItems'] || []).map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;"],"sourceRoot":""}