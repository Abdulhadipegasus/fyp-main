{"version":3,"sources":["../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js","pages/forms/Validation.tsx","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventListener.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMounted.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/usePrevious.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useResizeObserver.js","../node_modules/@restart/ui/esm/Anchor.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCallbackRef.js","components/PageTitle.tsx","../node_modules/@restart/ui/esm/Button.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useGlobalListener.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useIsomorphicEffect.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/BreadcrumbItem.js","../node_modules/react-bootstrap/esm/Breadcrumb.js","../node_modules/react-bootstrap/esm/Col.js","components/form/VerticalForm.tsx","components/form/FormInput.tsx"],"names":["useCommittedRef","value","ref","useRef","useEffect","current","useEventCallback","fn","useCallback","apply","arguments","NormalFormValidation","validated","setValidated","useState","_jsx","_Fragment","children","Card","_jsxs","Body","className","Form","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","Group","controlId","Label","Control","required","type","placeholder","defaultValue","Feedback","InputGroup","hasValidation","Text","id","Check","label","feedback","Button","FormValidationWithTooltip","tooltip","BasicForm","schemaResolver","yupResolver","yup","shape","username","email","password","confirmpassword","oneOf","checkbox","VerticalForm","resolver","defaultValues","FormInput","name","containerClass","endIcon","variant","HorizontalForm","schemaResolver2","email2","password2","confirmPassword2","webSite","horizontalCheck","methods","useForm","handleSubmit","register","control","formState","errors","as","Row","column","md","Col","span","offset","sm","ValidationTypes","schemaResolver3","requiredInput","equalTo1","equalTo2","url","digits","typeError","integer","positive","numberInput","alphaNumeric","matches","textAreaInput","RangeValidation","schemaResolver4","minLenInput","min","maxLenInput","max","rangeLenInput","minValueInput","maxValueInput","rangeValueInput","regEx","FormValidation","React","Fragment","PageTitle","breadCrumbItems","path","active","title","lg","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","createWithBsPrefix","prefix","displayName","Component","defaultProps","length","undefined","BsComponent","_ref","bsPrefix","Tag","props","resolvedPrefix","useBootstrapPrefix","classNames","useEventListener","eventTarget","listener","capture","handler","target","addEventListener","removeEventListener","useMounted","mounted","isMounted","usePrevious","WeakMap","_excluded","Anchor","onKeyDown","source","excluded","key","i","sourceKeys","Object","keys","indexOf","_objectWithoutPropertiesLoose","buttonProps","useButtonProps","assign","tagName","handleKeyDown","e","href","trim","role","useCallbackRef","appSelector","useRedux","layoutType","state","Layout","xs","LayoutTypes","LAYOUT_HORIZONTAL","LAYOUT_DETACHED","Breadcrumb","listProps","Item","map","item","index","_ref2","disabled","rel","onClick","tabIndex","meta","handleClick","isTrivialHref","asProp","useGlobalListener","documentTarget","document","context","isReactNative","global","navigator","product","isDOM","useLayoutEffect","DEVICE_SIZES","decoratedBsPrefix","sizePrefix","concat","classes","forEach","brkPoint","propValue","cols","infix","push","BreadcrumbItem","linkAs","LinkComponent","linkProps","useCol","spans","order","colProps","formClass","Array","isArray","child","createElement","PasswordInput","refCallback","otherProps","showPassword","setShowPassword","r","isInvalid","autoComplete","TextualInput","comp","rows","CheckInput","_ref3","SelectInput","_ref4","Select","_ref5","labelClassName","hasEndIcon"],"mappings":"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","file":"static/js/91.21b81cfa.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded befor being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport default useCommittedRef;","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  var ref = useCommittedRef(fn);\n  return useCallback(function () {\n    return ref.current && ref.current.apply(ref, arguments);\n  }, [ref]);\n}","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Row, Col, Card, Button, InputGroup, Form } from 'react-bootstrap';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// components\r\nimport PageTitle from '../../components/PageTitle';\r\nimport { FormInput, VerticalForm } from '../../components/form';\r\n\r\ninterface UserData {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    confirmpassword: string;\r\n    checkbox: boolean;\r\n}\r\n\r\ninterface UserData2 {\r\n    webSite: string;\r\n    email2: string;\r\n    password2: string;\r\n    confirmpassword2: string;\r\n    horizontalCheck: boolean;\r\n}\r\n\r\ninterface FormData1 {\r\n    requiredInput: string;\r\n    email: string;\r\n    equalTo1: string;\r\n    equalTo2: string;\r\n    url: string;\r\n    digits: string;\r\n    numberInput: string;\r\n    alphaNumeric: string;\r\n    textAreaInput: string;\r\n}\r\n\r\ninterface FormData2 {\r\n    minLenInput: string;\r\n    maxLenInput: string;\r\n    rangeLenInput: string;\r\n    minValueInput: string;\r\n    maxValueInput: string;\r\n    rangeValueInput: string;\r\n    regEx: string;\r\n}\r\n\r\nconst NormalFormValidation = () => {\r\n    const [validated, setValidated] = useState<boolean>(false);\r\n\r\n    /*\r\n     * handle form submission\r\n     */\r\n    const handleSubmit = (event: any) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n    };\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Body>\r\n                    <h4 className=\"header-title\">Bootstrap Validation - Normal</h4>\r\n                    <p className=\"sub-header\">\r\n                        Provide valuable, actionable feedback to your users with HTML5 form validation–available in all\r\n                        our supported browsers.\r\n                    </p>\r\n\r\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\r\n                            <Form.Label>First name</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\r\n                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom02\">\r\n                            <Form.Label>Last name</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\r\n                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustomUsername\">\r\n                            <Form.Label>Username</Form.Label>\r\n                            <InputGroup hasValidation>\r\n                                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    aria-describedby=\"inputGroupPrepend\"\r\n                                    required\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">Please choose a username.</Form.Control.Feedback>\r\n                            </InputGroup>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom03\">\r\n                            <Form.Label>City</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"City\" required />\r\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid city.</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom04\">\r\n                            <Form.Label>State</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"State\" required />\r\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid state.</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" controlId=\"validationCustom05\">\r\n                            <Form.Label>Zip</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Zip\" required />\r\n                            <Form.Control.Feedback type=\"invalid\">Please provide a valid zip.</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Check\r\n                                id=\"validation-check\"\r\n                                required\r\n                                label=\"Agree to terms and conditions\"\r\n                                feedback=\"You must agree before submitting.\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Button type=\"submit\">Submit form</Button>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nconst FormValidationWithTooltip = () => {\r\n    const [validated, setValidated] = useState<boolean>(false);\r\n\r\n    /*\r\n     * handle form submission\r\n     */\r\n    const handleSubmit = (event: any) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n    };\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Body>\r\n                    <h4 className=\"header-title\">Bootstrap Validation (Tooltips)</h4>\r\n                    <p className=\"sub-header\">\r\n                        If your form layout allows it, you can swap the <code>.valid | invalid-feedback</code> classes\r\n                        for <code>.valid | invalid-tooltip</code> classes to display validation feedback in a styled\r\n                        tooltip.\r\n                    </p>\r\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip01\">\r\n                            <Form.Label>First name</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\r\n                            <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip02\">\r\n                            <Form.Label>Last name</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\r\n                            <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationCustonTooltipme\">\r\n                            <Form.Label>Username</Form.Label>\r\n                            <InputGroup hasValidation>\r\n                                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    aria-describedby=\"inputGroupPrepend\"\r\n                                    required\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\" tooltip>\r\n                                    Please choose a username.\r\n                                </Form.Control.Feedback>\r\n                            </InputGroup>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip03\">\r\n                            <Form.Label>City</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"City\" required />\r\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\r\n                                Please provide a valid city.\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip04\">\r\n                            <Form.Label>State</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"State\" required />\r\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\r\n                                Please provide a valid state.\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip05\">\r\n                            <Form.Label>Zip</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Zip\" required />\r\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\r\n                                Please provide a valid zip.\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Button type=\"submit\">Submit form</Button>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nconst BasicForm = () => {\r\n    /*\r\n    form validation schema\r\n    */\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            username: yup.string().required('Please enter Username'),\r\n            email: yup.string().required('Please enter Email address'),\r\n            password: yup.string().required('Please enter Password'),\r\n            confirmpassword: yup\r\n                .string()\r\n                .oneOf([yup.ref('password'), null], \"Passwords don't match\")\r\n                .required('This value is required.'),\r\n            checkbox: yup.bool().oneOf([true], 'Must accept Terms and Conditions'),\r\n        })\r\n    );\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title mt-0 mb-1\">Basic Form</h4>\r\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\r\n                <VerticalForm<UserData>\r\n                    onSubmit={() => { }}\r\n                    resolver={schemaResolver}\r\n                    defaultValues={{ username: 'test' }}\r\n                >\r\n                    <FormInput\r\n                        label={'Username'}\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        placeholder=\"Enter your name\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Email address'}\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Password'}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        endIcon={false}\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Confirm Password'}\r\n                        type=\"password\"\r\n                        name=\"confirmpassword\"\r\n                        placeholder=\"Password\"\r\n                        endIcon={false}\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput label={'Remember me'} type=\"checkbox\" name=\"checkbox\" containerClass={'mb-2'} />\r\n\r\n                    <div className=\"text-md-end mb-0\">\r\n                        <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                        <Button variant=\"secondary\" type=\"reset\">\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                </VerticalForm>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst HorizontalForm = () => {\r\n    /*\r\n    form validation schema\r\n    */\r\n    const schemaResolver2 = yupResolver(\r\n        yup.object().shape({\r\n            email2: yup.string().required('Please enter Email address'),\r\n            password2: yup.string().required('Please enter Password'),\r\n            confirmPassword2: yup\r\n                .string()\r\n                .oneOf([yup.ref('password'), null], \"Passwords don't match\")\r\n                .required('This value is required.'),\r\n            webSite: yup.string().required('Please enter URL'),\r\n            horizontalCheck: yup.bool().oneOf([true], 'Must accept Terms and Conditions'),\r\n        })\r\n    );\r\n\r\n    const methods = useForm<UserData2>({\r\n        defaultValues: { email2: 'QSP_FYP_PROJECT@FYP.com' },\r\n        resolver: schemaResolver2,\r\n    });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title mt-0 mb-1\">Horizontal Form</h4>\r\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\r\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(() => { })}>\r\n                    <Form.Group as={Row} className=\"mb-2\">\r\n                        <Form.Label column md={4}>\r\n                            Email<span className=\"text-danger\">*</span>\r\n                        </Form.Label>\r\n                        <Col md={7}>\r\n                            <FormInput\r\n                                type=\"email\"\r\n                                name=\"email2\"\r\n                                placeholder=\"Email\"\r\n                                register={register}\r\n                                key=\"email2\"\r\n                                errors={errors}\r\n                                control={control}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} className=\"mb-2\">\r\n                        <Form.Label column md={4}>\r\n                            Password<span className=\"text-danger\">*</span>\r\n                        </Form.Label>\r\n                        <Col md={7}>\r\n                            <FormInput\r\n                                type=\"password\"\r\n                                name=\"password2\"\r\n                                placeholder=\"Password\"\r\n                                register={register}\r\n                                key=\"password2\"\r\n                                endIcon={false}\r\n                                errors={errors}\r\n                                control={control}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} className=\"mb-2\">\r\n                        <Form.Label column md={4}>\r\n                            Confirm Password<span className=\"text-danger\">*</span>\r\n                        </Form.Label>\r\n                        <Col md={7}>\r\n                            <FormInput\r\n                                type=\"password\"\r\n                                name=\"confirmPassword2\"\r\n                                placeholder=\"Password\"\r\n                                register={register}\r\n                                key=\"confirmPassword2\"\r\n                                endIcon={false}\r\n                                errors={errors}\r\n                                control={control}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} className=\"mb-2\">\r\n                        <Form.Label column md={4}>\r\n                            Web Site<span className=\"text-danger\">*</span>\r\n                        </Form.Label>\r\n                        <Col md={7}>\r\n                            <FormInput\r\n                                type=\"url\"\r\n                                name=\"webSite\"\r\n                                placeholder=\"URL\"\r\n                                register={register}\r\n                                key=\"webSite\"\r\n                                errors={errors}\r\n                                control={control}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} className=\"mb-2\" controlId=\"horizontalCheck\">\r\n                        <Col md={{ span: 8, offset: 4 }}>\r\n                            <FormInput\r\n                                label={'Remember me'}\r\n                                type=\"checkbox\"\r\n                                name=\"horizontalCheck\"\r\n                                register={register}\r\n                                key=\"horizontalCheck\"\r\n                                errors={errors}\r\n                                control={control}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} className=\"mb-2\">\r\n                        <Col sm={{ span: 8, offset: 4 }}>\r\n                            <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                            <Button variant=\"secondary\" type=\"reset\">\r\n                                Cancel\r\n                            </Button>\r\n                        </Col>\r\n                    </Form.Group>\r\n                </form>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ValidationTypes = () => {\r\n    /*\r\n       form validation schema\r\n       */\r\n    const schemaResolver3 = yupResolver(\r\n        yup.object().shape({\r\n            requiredInput: yup.string().required('This value is required.'),\r\n            email: yup.string().required('This value is required.').email('This value should be a valid email.'),\r\n            equalTo1: yup.string().required('This value is required.'),\r\n            equalTo2: yup\r\n                .string()\r\n                .oneOf([yup.ref('equalTo1'), null], 'This value should be the same.')\r\n                .required('This value is required.'),\r\n            url: yup.string().required('This value is required.').url('This value should be a valid url.'),\r\n            digits: yup\r\n                .number()\r\n                .typeError('This value should be digits.')\r\n                .required('This value is required.')\r\n                .integer('This value should be digits')\r\n                .positive(),\r\n            numberInput: yup.number().typeError('This value should be digits.').required('This value is required.'),\r\n            alphaNumeric: yup\r\n                .string()\r\n                .required('This value is required.')\r\n                .matches(/^[a-zA-Z0-9]+$/, 'This value should be a valid alphanumeric.'),\r\n            textAreaInput: yup.string().required('This value is required.'),\r\n        })\r\n    );\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title mt-0 mb-1\">Validation type</h4>\r\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\r\n                <VerticalForm<FormData1> onSubmit={() => { }} resolver={schemaResolver3}>\r\n                    <FormInput\r\n                        label={'Required'}\r\n                        type=\"text\"\r\n                        name=\"requiredInput\"\r\n                        placeholder=\"Type Something\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Equal To'}\r\n                        type=\"password\"\r\n                        name=\"equalTo1\"\r\n                        placeholder=\"Password\"\r\n                        endIcon={false}\r\n                    />\r\n                    <FormInput\r\n                        type=\"password\"\r\n                        name=\"equalTo2\"\r\n                        placeholder=\"Re-Type Password\"\r\n                        endIcon={false}\r\n                        containerClass={'mt-1 mb-2'}\r\n                    />\r\n\r\n                    <FormInput\r\n                        label={'E-Mail'}\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter a valid e-mail\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput label={'URL'} type=\"url\" name=\"url\" placeholder=\"URL\" containerClass={'mb-2'} />\r\n                    <FormInput\r\n                        label={'Digits'}\r\n                        type=\"text\"\r\n                        name=\"digits\"\r\n                        placeholder=\"Enter only digits\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Number'}\r\n                        type=\"text\"\r\n                        name=\"numberInput\"\r\n                        placeholder=\"Enter only numbers\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Alphanumeric'}\r\n                        type=\"text\"\r\n                        name=\"alphaNumeric\"\r\n                        containerClass={'mb-2'}\r\n                        placeholder=\"Enter alphanumeric value\"\r\n                    />\r\n                    <FormInput label={'Textarea'} type=\"textarea\" name=\"textAreaInput\" containerClass={'mb-2'} />\r\n                    <div>\r\n                        <div>\r\n                            <Button variant=\"primary\" className=\"waves-effect waves-light me-1\" type=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                            <Button variant=\"secondary\" type=\"reset\" className=\" waves-effect\">\r\n                                Cancel\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </VerticalForm>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst RangeValidation = () => {\r\n    /*\r\n     form validation schema\r\n     */\r\n    const schemaResolver4 = yupResolver(\r\n        yup.object().shape({\r\n            minLenInput: yup\r\n                .string()\r\n                .required('This value is required.')\r\n                .min(6, 'This value is too short. It should have 6 characters or more.'),\r\n            maxLenInput: yup\r\n                .string()\r\n                .required('This value is required.')\r\n                .max(6, 'This value is too long. It should have 6 characters or fewer.'),\r\n            rangeLenInput: yup\r\n                .string()\r\n                .min(5, 'This value length is invalid. It should be between 5 and 10 characters long.')\r\n                .max(10, 'This value length is invalid. It should be between 5 and 10 characters long.')\r\n                .required('This value is required.'),\r\n            minValueInput: yup\r\n                .number()\r\n                .min(6, 'This value should be greater than or equal to 6.')\r\n                .required('This value is required.'),\r\n            maxValueInput: yup\r\n                .number()\r\n                .max(6, 'This value should be less than or equal to 6.')\r\n                .required('This value is required.'),\r\n            rangeValueInput: yup\r\n                .number()\r\n                .min(6, 'This value should be between 6 and 100.')\r\n                .max(100, 'This value should be between 6 and 100.')\r\n                .required('This value is required.'),\r\n            regEx: yup\r\n                .string()\r\n                .required('This value is required.')\r\n                .matches(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'This value seems to be invalid.'),\r\n        })\r\n    );\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title mt-0 mb-1\">Range validation</h4>\r\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\r\n                <VerticalForm<FormData2> onSubmit={() => { }} resolver={schemaResolver4}>\r\n                    <FormInput\r\n                        label={'Min Length'}\r\n                        type=\"text\"\r\n                        name=\"minLenInput\"\r\n                        placeholder=\"Min 6 chars.\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Max Length'}\r\n                        type=\"text\"\r\n                        name=\"maxLenInput\"\r\n                        placeholder=\"Max 6 chars\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Range Length'}\r\n                        type=\"text\"\r\n                        name=\"rangeLenInput\"\r\n                        placeholder=\"Text between 5 - 10 chars length\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Min Value'}\r\n                        type=\"text\"\r\n                        name=\"minValueInput\"\r\n                        placeholder=\"Min value is 6\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Max Value'}\r\n                        type=\"text\"\r\n                        name=\"maxValueInput\"\r\n                        placeholder=\"Max value is 6\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Range Value'}\r\n                        type=\"text\"\r\n                        name=\"rangeValueInput\"\r\n                        placeholder=\"Number between 6 - 100\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n                    <FormInput\r\n                        label={'Regular Exp'}\r\n                        type=\"text\"\r\n                        name=\"regEx\"\r\n                        placeholder=\"Hex. Color\"\r\n                        containerClass={'mb-2'}\r\n                    />\r\n\r\n                    <div>\r\n                        <div>\r\n                            <Button variant=\"primary\" className=\"me-1 waves-effect waves-light\" type=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                            <Button variant=\"secondary\" type=\"reset\" className=\"waves-effect\">\r\n                                Cancel\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </VerticalForm>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst FormValidation = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Forms', path: '/forms/validation' },\r\n                    { label: 'Form Validation', path: '/forms/validation', active: true },\r\n                ]}\r\n                title={'Form Validation'}\r\n            />\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <NormalFormValidation />\r\n                </Col>\r\n\r\n                <Col lg={6}>\r\n                    <FormValidationWithTooltip />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <BasicForm />\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <HorizontalForm />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <ValidationTypes />\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <RangeValidation />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default FormValidation;\r\n","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import { useEffect } from 'react';\nimport useEventCallback from './useEventCallback';\n\n/**\n * Attaches an event handler outside directly to specified DOM element\n * bypassing the react synthetic event system.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useEventListener(eventTarget, event, listener, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var handler = useEventCallback(listener);\n  useEffect(function () {\n    var target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return function () {\n      return target.removeEventListener(event, handler, capture);\n    };\n  }, [eventTarget]);\n}","import { useRef, useEffect } from 'react';\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\n\nexport default function useMounted() {\n  var mounted = useRef(true);\n  var isMounted = useRef(function () {\n    return mounted.current;\n  });\n  useEffect(function () {\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nvar targetMap = new WeakMap();\nvar resizeObserver;\n\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(function (entries) {\n    entries.forEach(function (entry) {\n      var handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\n\n\nexport default function useResizeObserver(element) {\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  useEffect(function () {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, function (rect) {\n      setRect(rect);\n    });\n    return function () {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","const _excluded = [\"onKeyDown\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/anchor-has-content */\nimport * as React from 'react';\nimport { useEventCallback } from '@restart/hooks';\nimport { useButtonProps } from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n\n/**\n * An generic `<a>` component that covers a few A11y cases, ensuring that\n * cases where the `href` is missing or trivial like \"#\" are treated like buttons.\n */\nconst Anchor = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    onKeyDown\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps] = useButtonProps(Object.assign({\n    tagName: 'a'\n  }, props));\n  const handleKeyDown = useEventCallback(e => {\n    buttonProps.onKeyDown(e);\n    onKeyDown == null ? void 0 : onKeyDown(e);\n  });\n\n  if (isTrivialHref(props.href) && !props.role || props.role === 'button') {\n    return /*#__PURE__*/_jsx(\"a\", Object.assign({\n      ref: ref\n    }, props, buttonProps, {\n      onKeyDown: handleKeyDown\n    }));\n  }\n\n  return /*#__PURE__*/_jsx(\"a\", Object.assign({\n    ref: ref\n  }, props, {\n    onKeyDown: onKeyDown\n  }));\n});\nAnchor.displayName = 'Anchor';\nexport default Anchor;","import { useState } from 'react';\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\n\nexport default function useCallbackRef() {\n  return useState(null);\n}","import React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n// custom hoook\r\nimport { useRedux } from '../hooks/';\r\n\r\n// constants\r\nimport { LayoutTypes } from '../constants/';\r\n\r\ninterface BreadcrumbItems {\r\n    label: string;\r\n    path: string;\r\n    active?: boolean;\r\n}\r\n\r\ninterface PageTitleProps {\r\n    breadCrumbItems: Array<BreadcrumbItems>;\r\n    title: string;\r\n}\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps) => {\r\n    const { appSelector } = useRedux();\r\n\r\n    const { layoutType } = appSelector((state) => ({\r\n        layoutType: state.Layout.layoutType,\r\n    }));\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={12}>\r\n                <div\r\n                    className={classNames('page-title-box', {\r\n                        'page-title-box-alt':\r\n                            layoutType === LayoutTypes.LAYOUT_HORIZONTAL || layoutType === LayoutTypes.LAYOUT_DETACHED,\r\n                    })}\r\n                >\r\n                    <h4 className=\"page-title\">{props.title}</h4>\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\">Minton</Breadcrumb.Item>\r\n\r\n                            {(props['breadCrumbItems'] || []).map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","const _excluded = [\"as\", \"disabled\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n\n  const meta = {\n    tagName\n  };\n\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  return [{\n    role: 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href: tagName === 'a' && disabled ? undefined : href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    as: asProp,\n    disabled\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import useEventListener from './useEventListener';\nimport { useCallback } from 'react';\n\n/**\n * Attaches an event handler outside directly to the `document`,\n * bypassing the react synthetic event system.\n *\n * ```ts\n * useGlobalListener('keydown', (event) => {\n *  console.log(event.key)\n * })\n * ```\n *\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useGlobalListener(event, handler, capture) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  var documentTarget = useCallback(function () {\n    return document;\n  }, []);\n  return useEventListener(documentTarget, event, handler, capture);\n}","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import { useEffect, useLayoutEffect } from 'react';\nvar isReactNative = typeof global !== 'undefined' && // @ts-ignore\nglobal.navigator && // @ts-ignore\nglobal.navigator.product === 'ReactNative';\nvar isDOM = typeof document !== 'undefined';\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\n\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","import classNames from 'classnames';\nimport * as React from 'react';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  active: false,\n  linkProps: {}\n};\nconst BreadcrumbItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  children,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'li',\n  linkAs: LinkComponent = Anchor,\n  linkProps,\n  href,\n  title,\n  target,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb-item');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(prefix, className, {\n      active\n    }),\n    \"aria-current\": active ? 'page' : undefined,\n    children: active ? children : /*#__PURE__*/_jsx(LinkComponent, { ...linkProps,\n      href: href,\n      title: title,\n      target: target,\n      children: children\n    })\n  });\n});\nBreadcrumbItem.displayName = 'BreadcrumbItem';\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  label: 'breadcrumb',\n  listProps: {}\n};\nconst Breadcrumb = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  listProps,\n  children,\n  label,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'nav',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'breadcrumb');\n  return /*#__PURE__*/_jsx(Component, {\n    \"aria-label\": label,\n    className: className,\n    ref: ref,\n    ...props,\n    children: /*#__PURE__*/_jsx(\"ol\", { ...listProps,\n      className: classNames(prefix, listProps == null ? void 0 : listProps.className),\n      children: children\n    })\n  });\n});\nBreadcrumb.displayName = 'Breadcrumb';\nBreadcrumb.defaultProps = defaultProps;\nexport default Object.assign(Breadcrumb, {\n  Item: BreadcrumbItem\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const spans = [];\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{ ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, { ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import React from 'react';\r\nimport { useForm, Resolver, SubmitHandler } from 'react-hook-form';\r\n\r\ninterface VerticalFromProps<TFormValues> {\r\n    defaultValues?: any;\r\n    resolver?: Resolver<TFormValues>;\r\n    children?: any;\r\n    onSubmit: SubmitHandler<TFormValues>;\r\n    formClass?: string;\r\n}\r\n\r\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\r\n    defaultValues,\r\n    resolver,\r\n    children,\r\n    onSubmit,\r\n    formClass,\r\n}: VerticalFromProps<TFormValues>) => {\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\r\n            {Array.isArray(children)\r\n                ? children.map((child) => {\r\n                      return child.props && child.props.name\r\n                          ? React.createElement(child.type, {\r\n                                ...{\r\n                                    ...child.props,\r\n                                    register,\r\n                                    key: child.props.name,\r\n                                    errors,\r\n                                    control,\r\n                                },\r\n                            })\r\n                          : child;\r\n                  })\r\n                : children}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default VerticalForm;\r\n","import React, { useState, InputHTMLAttributes } from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\nimport { FieldErrors, Control } from 'react-hook-form';\r\n\r\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    endIcon?: boolean;\r\n    label?: string;\r\n    type?: string;\r\n    name: string;\r\n    comp?: string;\r\n    placeholder?: string;\r\n    register?: any;\r\n    errors?: FieldErrors;\r\n    control?: Control<any>;\r\n    className?: string;\r\n    labelClassName?: string;\r\n    containerClass?: string;\r\n    textClassName?: string;\r\n    refCallback?: any;\r\n    action?: any;\r\n    rows?: number;\r\n}\r\n\r\n/* Password Input with addons */\r\nconst PasswordInput = ({\r\n    name,\r\n    placeholder,\r\n    refCallback,\r\n    errors,\r\n    control,\r\n    register,\r\n    className,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    const [showPassword, setShowPassword] = useState<boolean>(false);\r\n\r\n    return (\r\n        <>\r\n            <InputGroup className=\"mb-0\">\r\n                <Form.Control\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder={placeholder}\r\n                    name={name}\r\n                    id={name}\r\n                    as=\"input\"\r\n                    ref={(r: HTMLInputElement) => {\r\n                        if (refCallback) refCallback(r);\r\n                    }}\r\n                    className={className}\r\n                    isInvalid={errors && errors[name] ? true : false}\r\n                    {...(register ? register(name) : {})}\r\n                    autoComplete={name}\r\n                    {...otherProps}\r\n                />\r\n                <div\r\n                    className={classNames('input-group-text', 'input-group-password', {\r\n                        'show-password': showPassword,\r\n                    })}\r\n                    data-password={showPassword ? 'true' : 'false'}\r\n                >\r\n                    <span\r\n                        className=\"password-eye\"\r\n                        onClick={() => {\r\n                            setShowPassword(!showPassword);\r\n                        }}\r\n                    ></span>\r\n                </div>\r\n            </InputGroup>\r\n\r\n            {errors && errors[name] ? (\r\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                    {errors[name]['message']}\r\n                </Form.Control.Feedback>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\n// textual form-controls—like inputs, passwords, textareas etc.\r\nconst TextualInput = ({\r\n    type,\r\n    name,\r\n    placeholder,\r\n    endIcon,\r\n    register,\r\n    errors,\r\n    comp,\r\n    rows,\r\n    className,\r\n    refCallback,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    return (\r\n        <>\r\n            {type === 'password' && endIcon ? (\r\n                <>\r\n                    <PasswordInput\r\n                        name={name}\r\n                        placeholder={placeholder}\r\n                        refCallback={refCallback}\r\n                        errors={errors!}\r\n                        register={register}\r\n                        className={className}\r\n                        {...otherProps}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Form.Control\r\n                        type={type}\r\n                        placeholder={placeholder}\r\n                        name={name}\r\n                        as={comp}\r\n                        id={name}\r\n                        ref={(r: HTMLInputElement) => {\r\n                            if (refCallback) refCallback(r);\r\n                        }}\r\n                        className={className}\r\n                        isInvalid={errors && errors[name] ? true : false}\r\n                        {...(register ? register(name) : {})}\r\n                        rows={rows}\r\n                        {...otherProps}\r\n                    ></Form.Control>\r\n\r\n                    {errors && errors[name] ? (\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                            {errors[name]['message']}\r\n                        </Form.Control.Feedback>\r\n                    ) : null}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n// non-textual checkbox and radio controls\r\nconst CheckInput = ({\r\n    type,\r\n    label,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    comp,\r\n    rows,\r\n    className,\r\n    refCallback,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    return (\r\n        <>\r\n            <Form.Check\r\n                type={type}\r\n                label={label}\r\n                name={name}\r\n                id={name}\r\n                ref={(r: HTMLInputElement) => {\r\n                    if (refCallback) refCallback(r);\r\n                }}\r\n                className={className}\r\n                isInvalid={errors && errors[name] ? true : false}\r\n                {...(register ? register(name) : {})}\r\n                {...otherProps}\r\n            />\r\n\r\n            {errors && errors[name] ? (\r\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                    {errors[name]['message']}\r\n                </Form.Control.Feedback>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\n// handle select controls\r\nconst SelectInput = ({\r\n    type,\r\n    label,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    comp,\r\n    className,\r\n    children,\r\n    refCallback,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    return (\r\n        <>\r\n            <Form.Select\r\n                type={type}\r\n                label={label}\r\n                name={name}\r\n                id={name}\r\n                ref={(r: HTMLInputElement) => {\r\n                    if (refCallback) refCallback(r);\r\n                }}\r\n                children={children}\r\n                className={className}\r\n                isInvalid={errors && errors[name] ? true : false}\r\n                {...(register ? register(name) : {})}\r\n                {...otherProps}\r\n            />\r\n\r\n            {errors && errors[name] ? (\r\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nconst FormInput = ({\r\n    label,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    endIcon,\r\n    register,\r\n    errors,\r\n    control,\r\n    className,\r\n    labelClassName,\r\n    containerClass,\r\n    refCallback,\r\n    children,\r\n    rows,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    // handle input type\r\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\r\n\r\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\r\n\r\n    return (\r\n        <>\r\n            {type === 'hidden' ? (\r\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\r\n            ) : (\r\n                <>\r\n                    {type === 'select' ? (\r\n                        <Form.Group className={containerClass}>\r\n                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                            <SelectInput\r\n                                type={type}\r\n                                name={name}\r\n                                placeholder={placeholder}\r\n                                refCallback={refCallback}\r\n                                errors={errors}\r\n                                register={register}\r\n                                comp={comp}\r\n                                className={className}\r\n                                children={children}\r\n                                {...otherProps}\r\n                            />\r\n                        </Form.Group>\r\n                    ) : (\r\n                        <>\r\n                            {type === 'checkbox' || type === 'radio' ? (\r\n                                <Form.Group className={containerClass}>\r\n                                    <CheckInput\r\n                                        type={type}\r\n                                        label={label}\r\n                                        name={name}\r\n                                        placeholder={placeholder}\r\n                                        refCallback={refCallback}\r\n                                        errors={errors}\r\n                                        register={register}\r\n                                        comp={comp}\r\n                                        className={className}\r\n                                        rows={rows}\r\n                                        {...otherProps}\r\n                                    />\r\n                                </Form.Group>\r\n                            ) : (\r\n                                <Form.Group className={containerClass}>\r\n                                    {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                    <TextualInput\r\n                                        type={type}\r\n                                        name={name}\r\n                                        placeholder={placeholder}\r\n                                        endIcon={hasEndIcon}\r\n                                        refCallback={refCallback}\r\n                                        errors={errors}\r\n                                        register={register}\r\n                                        comp={comp}\r\n                                        className={className}\r\n                                        rows={rows}\r\n                                        {...otherProps}\r\n                                    />\r\n                                </Form.Group>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n"],"sourceRoot":""}